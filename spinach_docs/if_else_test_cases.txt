//////////////////////////////////////////////////////////////////////////////
// if_else_test_cases.txt: holds most of the test samples used for testing  //
//                         the SPINA application as per the current status. //
//                                                                          //
// version: 1.1                                                             //
// Language Tested: C#, Visual Studio 2008 .Net Framework 3.5               //    
// Platform:        Dell Inspiron 1525, Windows Vista Business, SP 1        //
// Application:     SPINACH Project, CSE 784, Spring 2009                   //
// Author:          Rajika Tandon, Syracuse University (ratandon@syr.edu)   //
//////////////////////////////////////////////////////////////////////////////


Note: 

- Currently if-else does not support local scope. But will be completed soon.
- Please don't copy-paste the comments/undeline as well. They are not supported.


Only IF
============================================
============================================

Positive Cases
========================

int a; 
a=15;
if(a==15)
{ print a; } 
------------------------

int a; 
double x;
x=16.5;
a=15;
if(a==15)
{ print a; } 
print x;
------------------------


Negative Cases
========================

Grammar not supporting, int/double on lhs of comparison operator
int a; 
a=15;
if(15==a)
{ print a; } 
------------------------

int a; 
a=1;
if(a=15)
{ print a; } 
------------------------


IF-ELSE
============================================
============================================

Equal to
========================

int a; 
int b; 
a=10;
b=10;
if(a==b)
{ print a; } 
else 
{ print b; }


Not Equal to
========================

int a;
int b;
a=10;
b=20;
if(a != 18)
{ print a; }
else
{ print b; }


Greater than
========================

int a;
int b;
a=10;
b=20;
if(a>10)
{ print a; }
else
{ print b; }


Greater than equal to
========================

double a;
double b;
a=10.89;
b=10.88;
if(a>=b)
{ print a; }
else
{ print b; }

/* float should not be supported but I am not getting any error in case I write float */
/* Is this semantic error ? */
float a;
float b;
a=10.89;
b=10.88;
if(a>=b)
{ print a; }
else
{ print b; }


Less than
========================

double a;
double b;
a=90.89;
b=78.88;
if(a<b)
{ print a; }
else
{ print b; }


Less than equal to
========================

double a;
double b;
a=10.89;
b=078.88;
if(a<=b)
{ print a; }
else
{ print b; }


NESTED CASES:
================

int ax;
ax=12;
if(ax==12)
{
  int a;
  a=10;

  if(a<10)
  {
    double b;
    b=10.2;
  }
  else
  {
    int c;
    c=a+30-20;
    print c;
  }
}
else
{ print ax; }
-----------------------

int ax;
ax=12;
if(ax==12)
{
  int a;
  a=10;

  if(a<=10)
  {
    double b;
    b=10.2;
    print b;
    
    if(b != 0)
    { print ax; }
  }
  else
  {
    int c;
    c=a+30-20;
    print c;
  }
}
else
{ print ax; }
-----------------------


OTHER CASES:
============

int ax;
ax=12;
string abc;
abc = "Hi! How are you ? ";
if(ax==12) 
{
int a;
a=10;
double b;
b=10.2;
int c;
c=a+30-20;
print c;
print abc;
}
else
{ print ax; }
-----------------------

// matrix variables can't come in if expression
Matrix<int>[2][2]a=[1,2,3,4];
Matrix<int>[2][2]b=[1,2,3,4];
Matrix<int>[2][2]d=[0,0,0,0];
double bx;
bx=12.00000001;
if(b > 12)  // matrix variable
{
d=a+b+c;
print d;
}
else
{
Matrix<int>[2][2]p=[0,0,0,0];
p=a*b;
p=p*p*p*p;
print p;
}
------------------------

Integer & Double Comparison (supported)
==============================================

int ax;
ax=12;
if(ax<9.33)
{
Matrix<int>[2][2]a=[1,2,3,4];
Matrix<int>[2][2]b=[1,2,3,4];
Matrix<int>[2][2]c=[1,2,3,4];
Matrix<int>[2][2]d=[0,0,0,0];
d=a+b+c;
print d;
}
else
{ print ax; }
------------------------

double ax;
ax=78.454; 
if(ax == 1)
{
  print ax;
}
else
{
  Matrix<int>[2][2]a=[1,2,3,4];
  a=a*a+a*a*a;
  print a;
}
------------------------

int r;
r=10;
Matrix<int>[2][2]a=[1,2,3,4];
Matrix<int>[2][2]b=[1,2,3,4];
Matrix<int>[2][2]c=[1,2,3,4];
Matrix<int>[2][2]d=[0,0,0,0];
double bx;
bx=12.00000001;
if(bx>12)
{
d=a+b+c;
print d;
r=r+r;
print r;
}
else
{
Matrix<int>[2][2]p=[0,0,0,0];
p=a+c;
print p;
}
if(r==20)
{
string s;
s = "Second IF statement";
print s;
Matrix<int>[2][2]e=[0,0,0,0];
e=b+c;
print e;
}
-------------------------

STRING CASES:
===============

int a;
int b;
int c;
a=1; 
b=2;
c=3;
string s;
s="12";
string str;
str = "Hi! How are you ? ";
if(s==str) 
{ print a; }
else
{ print b; }
print c;
-----------------------

int a;
int b;
int c;
a=1; 
b=2;
string s;
s="ABC";
string str;
str = "XYZ";
if(s>str) 
{ print a; }
else
{ print b; }
-----------------------

int a;
int b;
int c;
a=1; 
b=2;
string s;
s="ABC";
string str;
str = "XYZ";
if(s<=str) 
{ print a; }
else
{ print b; }
-----------------------

int a;
int b;
int c;
a=1; 
b=2;
c=3;
string s;
s="12";
string str;
str = "12";
if(s==str) 
{ print a; }
else
{ print b; }
print c;
-----------------------


/////////////////////////////////////////////////////////////////////////////////
//     STRUCTURE's ASSIGNMENT FUNCTION YET TO BE PROVIDED BY FRONT END         //
/////////////////////////////////////////////////////////////////////////////////
So the following won't work since x.sa = 12 won't assign x.sa to 12.

STRUCTURE CASES:
===================

struct abc
{
  int sa;
  double sb;
};

abc x;
x.sa = 12;
x.sb = 12.99;

if( x.sa == 12)
{
  int d;
  d=20*6;
  print d;
}
else
{
  int r;
  r=10;
  print r;
  print x.sb;
}
-----------------------

struct abc
{
  int sa;
  double sb;
};
abc x;
x.sa = 12;
x.sb = 12.99;
Matrix<int>[2][2]a=[1,2,3,4];
Matrix<int>[2][2]b=[1,2,3,4];
Matrix<int>[2][2]c=[1,2,3,4];
Matrix<int>[2][2]d=[0,0,0,0];

if( x.sa == 12)
{
  d=a+b+c;
  print d;
}

int r;
r=10;

if(r >90)
{
  r=r+r;
  print r;
}
else
{
  Matrix<int>[2][2]p=[0,0,0,0];
  p=b*c;
  print p;
  
  if(p <= 10)
  {
    p=a+b-c;
    print p;
  }
}
--------------------------

